version: '3.8'
networks:
  app-network:
    driver: bridge

services:
  api:
    build:
      context: .
      dockerfile: cmd/api/Dockerfile
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      notification-consumer:
        condition: service_started
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - app-network

  notification-consumer:
    deploy:
      replicas: 5
    build:
      context: .
      dockerfile: cmd/notification-consumer/Dockerfile
    env_file:
      - .env
    depends_on:
      kafka-topics-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      mailhog:
        condition: service_started
      smsc-simulator:
        condition: service_started
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka-topics-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:9092 1 20 && \
        kafka-topics --create --topic notifications --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092
    networks:
      - app-network
    restart: 'no'
    deploy:
      restart_policy:
        condition: none

  postgres:
    image: postgres:latest
    container_name: postgres-dev
    environment:
      POSTGRES_USER: ezhivkov
      POSTGRES_PASSWORD: ezhivkov
      POSTGRES_DB: devdb
    ports:
      - "5433:5432"
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka-topics-init:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network

  smsc-simulator:
    image: bitsensedev/smpp-sim:latest
    container_name: smsc-simulator
    ports:
      - "2775:2775"
      - "8989:8989"
    networks:
      - app-network
