// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gomail "gopkg.in/gomail.v2"
)

// MockMailClient is an autogenerated mock type for the MailClient type
type MockMailClient struct {
	mock.Mock
}

type MockMailClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailClient) EXPECT() *MockMailClient_Expecter {
	return &MockMailClient_Expecter{mock: &_m.Mock}
}

// DialAndSend provides a mock function with given fields: m
func (_m *MockMailClient) DialAndSend(m ...*gomail.Message) error {
	_va := make([]interface{}, len(m))
	for _i := range m {
		_va[_i] = m[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DialAndSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...*gomail.Message) error); ok {
		r0 = rf(m...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailClient_DialAndSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DialAndSend'
type MockMailClient_DialAndSend_Call struct {
	*mock.Call
}

// DialAndSend is a helper method to define mock.On call
//   - m ...*gomail.Message
func (_e *MockMailClient_Expecter) DialAndSend(m ...interface{}) *MockMailClient_DialAndSend_Call {
	return &MockMailClient_DialAndSend_Call{Call: _e.mock.On("DialAndSend",
		append([]interface{}{}, m...)...)}
}

func (_c *MockMailClient_DialAndSend_Call) Run(run func(m ...*gomail.Message)) *MockMailClient_DialAndSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*gomail.Message, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*gomail.Message)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockMailClient_DialAndSend_Call) Return(_a0 error) *MockMailClient_DialAndSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailClient_DialAndSend_Call) RunAndReturn(run func(...*gomail.Message) error) *MockMailClient_DialAndSend_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailClient creates a new instance of MockMailClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailClient {
	mock := &MockMailClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
