// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	smpp "github.com/fiorix/go-smpp/smpp"
	mock "github.com/stretchr/testify/mock"
)

// MockSmsClient is an autogenerated mock type for the SmsClient type
type MockSmsClient struct {
	mock.Mock
}

type MockSmsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSmsClient) EXPECT() *MockSmsClient_Expecter {
	return &MockSmsClient_Expecter{mock: &_m.Mock}
}

// Submit provides a mock function with given fields: sm
func (_m *MockSmsClient) Submit(sm *smpp.ShortMessage) (*smpp.ShortMessage, error) {
	ret := _m.Called(sm)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 *smpp.ShortMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*smpp.ShortMessage) (*smpp.ShortMessage, error)); ok {
		return rf(sm)
	}
	if rf, ok := ret.Get(0).(func(*smpp.ShortMessage) *smpp.ShortMessage); ok {
		r0 = rf(sm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smpp.ShortMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(*smpp.ShortMessage) error); ok {
		r1 = rf(sm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmsClient_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type MockSmsClient_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - sm *smpp.ShortMessage
func (_e *MockSmsClient_Expecter) Submit(sm interface{}) *MockSmsClient_Submit_Call {
	return &MockSmsClient_Submit_Call{Call: _e.mock.On("Submit", sm)}
}

func (_c *MockSmsClient_Submit_Call) Run(run func(sm *smpp.ShortMessage)) *MockSmsClient_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*smpp.ShortMessage))
	})
	return _c
}

func (_c *MockSmsClient_Submit_Call) Return(_a0 *smpp.ShortMessage, _a1 error) *MockSmsClient_Submit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSmsClient_Submit_Call) RunAndReturn(run func(*smpp.ShortMessage) (*smpp.ShortMessage, error)) *MockSmsClient_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSmsClient creates a new instance of MockSmsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSmsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSmsClient {
	mock := &MockSmsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
