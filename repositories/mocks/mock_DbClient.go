// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockDbClient is an autogenerated mock type for the DbClient type
type MockDbClient struct {
	mock.Mock
}

type MockDbClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbClient) EXPECT() *MockDbClient_Expecter {
	return &MockDbClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: value
func (_m *MockDbClient) Create(value interface{}) *gorm.DB {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}) *gorm.DB); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockDbClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDbClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - value interface{}
func (_e *MockDbClient_Expecter) Create(value interface{}) *MockDbClient_Create_Call {
	return &MockDbClient_Create_Call{Call: _e.mock.On("Create", value)}
}

func (_c *MockDbClient_Create_Call) Run(run func(value interface{})) *MockDbClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockDbClient_Create_Call) Return(tx *gorm.DB) *MockDbClient_Create_Call {
	_c.Call.Return(tx)
	return _c
}

func (_c *MockDbClient_Create_Call) RunAndReturn(run func(interface{}) *gorm.DB) *MockDbClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: dest, conds
func (_m *MockDbClient) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) *gorm.DB); ok {
		r0 = rf(dest, conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockDbClient_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockDbClient_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - dest interface{}
//   - conds ...interface{}
func (_e *MockDbClient_Expecter) Find(dest interface{}, conds ...interface{}) *MockDbClient_Find_Call {
	return &MockDbClient_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{dest}, conds...)...)}
}

func (_c *MockDbClient_Find_Call) Run(run func(dest interface{}, conds ...interface{})) *MockDbClient_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockDbClient_Find_Call) Return(tx *gorm.DB) *MockDbClient_Find_Call {
	_c.Call.Return(tx)
	return _c
}

func (_c *MockDbClient_Find_Call) RunAndReturn(run func(interface{}, ...interface{}) *gorm.DB) *MockDbClient_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Take provides a mock function with given fields: dest, conds
func (_m *MockDbClient) Take(dest interface{}, conds ...interface{}) *gorm.DB {
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Take")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) *gorm.DB); ok {
		r0 = rf(dest, conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockDbClient_Take_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Take'
type MockDbClient_Take_Call struct {
	*mock.Call
}

// Take is a helper method to define mock.On call
//   - dest interface{}
//   - conds ...interface{}
func (_e *MockDbClient_Expecter) Take(dest interface{}, conds ...interface{}) *MockDbClient_Take_Call {
	return &MockDbClient_Take_Call{Call: _e.mock.On("Take",
		append([]interface{}{dest}, conds...)...)}
}

func (_c *MockDbClient_Take_Call) Run(run func(dest interface{}, conds ...interface{})) *MockDbClient_Take_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockDbClient_Take_Call) Return(tx *gorm.DB) *MockDbClient_Take_Call {
	_c.Call.Return(tx)
	return _c
}

func (_c *MockDbClient_Take_Call) RunAndReturn(run func(interface{}, ...interface{}) *gorm.DB) *MockDbClient_Take_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbClient creates a new instance of MockDbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbClient {
	mock := &MockDbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
