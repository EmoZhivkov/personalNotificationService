// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	repositories "personalNotificationService/repositories"

	mock "github.com/stretchr/testify/mock"
)

// MockUserDatabase is an autogenerated mock type for the UserDatabase type
type MockUserDatabase struct {
	mock.Mock
}

type MockUserDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserDatabase) EXPECT() *MockUserDatabase_Expecter {
	return &MockUserDatabase_Expecter{mock: &_m.Mock}
}

// CreateUsers provides a mock function with given fields: users
func (_m *MockUserDatabase) CreateUsers(users repositories.Users) error {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.Users) error); ok {
		r0 = rf(users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserDatabase_CreateUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUsers'
type MockUserDatabase_CreateUsers_Call struct {
	*mock.Call
}

// CreateUsers is a helper method to define mock.On call
//   - users repositories.Users
func (_e *MockUserDatabase_Expecter) CreateUsers(users interface{}) *MockUserDatabase_CreateUsers_Call {
	return &MockUserDatabase_CreateUsers_Call{Call: _e.mock.On("CreateUsers", users)}
}

func (_c *MockUserDatabase_CreateUsers_Call) Run(run func(users repositories.Users)) *MockUserDatabase_CreateUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Users))
	})
	return _c
}

func (_c *MockUserDatabase_CreateUsers_Call) Return(_a0 error) *MockUserDatabase_CreateUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserDatabase_CreateUsers_Call) RunAndReturn(run func(repositories.Users) error) *MockUserDatabase_CreateUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *MockUserDatabase) GetUserByUsername(username string) (*repositories.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *repositories.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repositories.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *repositories.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserDatabase_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockUserDatabase_Expecter) GetUserByUsername(username interface{}) *MockUserDatabase_GetUserByUsername_Call {
	return &MockUserDatabase_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *MockUserDatabase_GetUserByUsername_Call) Run(run func(username string)) *MockUserDatabase_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserDatabase_GetUserByUsername_Call) Return(_a0 *repositories.User, _a1 error) *MockUserDatabase_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_GetUserByUsername_Call) RunAndReturn(run func(string) (*repositories.User, error)) *MockUserDatabase_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByUsernames provides a mock function with given fields: usernames
func (_m *MockUserDatabase) GetUsersByUsernames(usernames []string) (repositories.Users, error) {
	ret := _m.Called(usernames)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByUsernames")
	}

	var r0 repositories.Users
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (repositories.Users, error)); ok {
		return rf(usernames)
	}
	if rf, ok := ret.Get(0).(func([]string) repositories.Users); ok {
		r0 = rf(usernames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.Users)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(usernames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_GetUsersByUsernames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByUsernames'
type MockUserDatabase_GetUsersByUsernames_Call struct {
	*mock.Call
}

// GetUsersByUsernames is a helper method to define mock.On call
//   - usernames []string
func (_e *MockUserDatabase_Expecter) GetUsersByUsernames(usernames interface{}) *MockUserDatabase_GetUsersByUsernames_Call {
	return &MockUserDatabase_GetUsersByUsernames_Call{Call: _e.mock.On("GetUsersByUsernames", usernames)}
}

func (_c *MockUserDatabase_GetUsersByUsernames_Call) Run(run func(usernames []string)) *MockUserDatabase_GetUsersByUsernames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockUserDatabase_GetUsersByUsernames_Call) Return(_a0 repositories.Users, _a1 error) *MockUserDatabase_GetUsersByUsernames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_GetUsersByUsernames_Call) RunAndReturn(run func([]string) (repositories.Users, error)) *MockUserDatabase_GetUsersByUsernames_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserDatabase creates a new instance of MockUserDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserDatabase {
	mock := &MockUserDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
