// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	repositories "personalNotificationService/repositories"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserNotificationChannelsDatabase is an autogenerated mock type for the UserNotificationChannelsDatabase type
type MockUserNotificationChannelsDatabase struct {
	mock.Mock
}

type MockUserNotificationChannelsDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserNotificationChannelsDatabase) EXPECT() *MockUserNotificationChannelsDatabase_Expecter {
	return &MockUserNotificationChannelsDatabase_Expecter{mock: &_m.Mock}
}

// BulkCreateUserNotificationChannel provides a mock function with given fields: userNotificationChannels
func (_m *MockUserNotificationChannelsDatabase) BulkCreateUserNotificationChannel(userNotificationChannels []repositories.UserNotificationChannels) error {
	ret := _m.Called(userNotificationChannels)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreateUserNotificationChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]repositories.UserNotificationChannels) error); ok {
		r0 = rf(userNotificationChannels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreateUserNotificationChannel'
type MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call struct {
	*mock.Call
}

// BulkCreateUserNotificationChannel is a helper method to define mock.On call
//   - userNotificationChannels []repositories.UserNotificationChannels
func (_e *MockUserNotificationChannelsDatabase_Expecter) BulkCreateUserNotificationChannel(userNotificationChannels interface{}) *MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call {
	return &MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call{Call: _e.mock.On("BulkCreateUserNotificationChannel", userNotificationChannels)}
}

func (_c *MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call) Run(run func(userNotificationChannels []repositories.UserNotificationChannels)) *MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]repositories.UserNotificationChannels))
	})
	return _c
}

func (_c *MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call) Return(_a0 error) *MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call) RunAndReturn(run func([]repositories.UserNotificationChannels) error) *MockUserNotificationChannelsDatabase_BulkCreateUserNotificationChannel_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserNotificationChannel provides a mock function with given fields: channel
func (_m *MockUserNotificationChannelsDatabase) CreateUserNotificationChannel(channel *repositories.UserNotificationChannels) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserNotificationChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repositories.UserNotificationChannels) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserNotificationChannel'
type MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call struct {
	*mock.Call
}

// CreateUserNotificationChannel is a helper method to define mock.On call
//   - channel *repositories.UserNotificationChannels
func (_e *MockUserNotificationChannelsDatabase_Expecter) CreateUserNotificationChannel(channel interface{}) *MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call {
	return &MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call{Call: _e.mock.On("CreateUserNotificationChannel", channel)}
}

func (_c *MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call) Run(run func(channel *repositories.UserNotificationChannels)) *MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repositories.UserNotificationChannels))
	})
	return _c
}

func (_c *MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call) Return(_a0 error) *MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call) RunAndReturn(run func(*repositories.UserNotificationChannels) error) *MockUserNotificationChannelsDatabase_CreateUserNotificationChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserNotificationChannels provides a mock function with given fields: username, notificationID
func (_m *MockUserNotificationChannelsDatabase) GetUserNotificationChannels(username string, notificationID uuid.UUID) (repositories.NotificationChannels, error) {
	ret := _m.Called(username, notificationID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNotificationChannels")
	}

	var r0 repositories.NotificationChannels
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) (repositories.NotificationChannels, error)); ok {
		return rf(username, notificationID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) repositories.NotificationChannels); ok {
		r0 = rf(username, notificationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.NotificationChannels)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(username, notificationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserNotificationChannels'
type MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call struct {
	*mock.Call
}

// GetUserNotificationChannels is a helper method to define mock.On call
//   - username string
//   - notificationID uuid.UUID
func (_e *MockUserNotificationChannelsDatabase_Expecter) GetUserNotificationChannels(username interface{}, notificationID interface{}) *MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call {
	return &MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call{Call: _e.mock.On("GetUserNotificationChannels", username, notificationID)}
}

func (_c *MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call) Run(run func(username string, notificationID uuid.UUID)) *MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call) Return(_a0 repositories.NotificationChannels, _a1 error) *MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call) RunAndReturn(run func(string, uuid.UUID) (repositories.NotificationChannels, error)) *MockUserNotificationChannelsDatabase_GetUserNotificationChannels_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserNotificationChannelsDatabase creates a new instance of MockUserNotificationChannelsDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserNotificationChannelsDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserNotificationChannelsDatabase {
	mock := &MockUserNotificationChannelsDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
