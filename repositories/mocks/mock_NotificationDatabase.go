// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	repositories "personalNotificationService/repositories"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockNotificationDatabase is an autogenerated mock type for the NotificationDatabase type
type MockNotificationDatabase struct {
	mock.Mock
}

type MockNotificationDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationDatabase) EXPECT() *MockNotificationDatabase_Expecter {
	return &MockNotificationDatabase_Expecter{mock: &_m.Mock}
}

// CreateNotification provides a mock function with given fields: notification
func (_m *MockNotificationDatabase) CreateNotification(notification *repositories.Notification) error {
	ret := _m.Called(notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repositories.Notification) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationDatabase_CreateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotification'
type MockNotificationDatabase_CreateNotification_Call struct {
	*mock.Call
}

// CreateNotification is a helper method to define mock.On call
//   - notification *repositories.Notification
func (_e *MockNotificationDatabase_Expecter) CreateNotification(notification interface{}) *MockNotificationDatabase_CreateNotification_Call {
	return &MockNotificationDatabase_CreateNotification_Call{Call: _e.mock.On("CreateNotification", notification)}
}

func (_c *MockNotificationDatabase_CreateNotification_Call) Run(run func(notification *repositories.Notification)) *MockNotificationDatabase_CreateNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repositories.Notification))
	})
	return _c
}

func (_c *MockNotificationDatabase_CreateNotification_Call) Return(_a0 error) *MockNotificationDatabase_CreateNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationDatabase_CreateNotification_Call) RunAndReturn(run func(*repositories.Notification) error) *MockNotificationDatabase_CreateNotification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotifications provides a mock function with given fields: notifications
func (_m *MockNotificationDatabase) CreateNotifications(notifications repositories.Notifications) error {
	ret := _m.Called(notifications)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.Notifications) error); ok {
		r0 = rf(notifications)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationDatabase_CreateNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotifications'
type MockNotificationDatabase_CreateNotifications_Call struct {
	*mock.Call
}

// CreateNotifications is a helper method to define mock.On call
//   - notifications repositories.Notifications
func (_e *MockNotificationDatabase_Expecter) CreateNotifications(notifications interface{}) *MockNotificationDatabase_CreateNotifications_Call {
	return &MockNotificationDatabase_CreateNotifications_Call{Call: _e.mock.On("CreateNotifications", notifications)}
}

func (_c *MockNotificationDatabase_CreateNotifications_Call) Run(run func(notifications repositories.Notifications)) *MockNotificationDatabase_CreateNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Notifications))
	})
	return _c
}

func (_c *MockNotificationDatabase_CreateNotifications_Call) Return(_a0 error) *MockNotificationDatabase_CreateNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationDatabase_CreateNotifications_Call) RunAndReturn(run func(repositories.Notifications) error) *MockNotificationDatabase_CreateNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationByID provides a mock function with given fields: id
func (_m *MockNotificationDatabase) GetNotificationByID(id uuid.UUID) (*repositories.Notification, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationByID")
	}

	var r0 *repositories.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*repositories.Notification, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *repositories.Notification); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationDatabase_GetNotificationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationByID'
type MockNotificationDatabase_GetNotificationByID_Call struct {
	*mock.Call
}

// GetNotificationByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockNotificationDatabase_Expecter) GetNotificationByID(id interface{}) *MockNotificationDatabase_GetNotificationByID_Call {
	return &MockNotificationDatabase_GetNotificationByID_Call{Call: _e.mock.On("GetNotificationByID", id)}
}

func (_c *MockNotificationDatabase_GetNotificationByID_Call) Run(run func(id uuid.UUID)) *MockNotificationDatabase_GetNotificationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockNotificationDatabase_GetNotificationByID_Call) Return(_a0 *repositories.Notification, _a1 error) *MockNotificationDatabase_GetNotificationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationDatabase_GetNotificationByID_Call) RunAndReturn(run func(uuid.UUID) (*repositories.Notification, error)) *MockNotificationDatabase_GetNotificationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationsByIDs provides a mock function with given fields: ids
func (_m *MockNotificationDatabase) GetNotificationsByIDs(ids uuid.UUIDs) (repositories.Notifications, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByIDs")
	}

	var r0 repositories.Notifications
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUIDs) (repositories.Notifications, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUIDs) repositories.Notifications); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.Notifications)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUIDs) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationDatabase_GetNotificationsByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationsByIDs'
type MockNotificationDatabase_GetNotificationsByIDs_Call struct {
	*mock.Call
}

// GetNotificationsByIDs is a helper method to define mock.On call
//   - ids uuid.UUIDs
func (_e *MockNotificationDatabase_Expecter) GetNotificationsByIDs(ids interface{}) *MockNotificationDatabase_GetNotificationsByIDs_Call {
	return &MockNotificationDatabase_GetNotificationsByIDs_Call{Call: _e.mock.On("GetNotificationsByIDs", ids)}
}

func (_c *MockNotificationDatabase_GetNotificationsByIDs_Call) Run(run func(ids uuid.UUIDs)) *MockNotificationDatabase_GetNotificationsByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUIDs))
	})
	return _c
}

func (_c *MockNotificationDatabase_GetNotificationsByIDs_Call) Return(_a0 repositories.Notifications, _a1 error) *MockNotificationDatabase_GetNotificationsByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationDatabase_GetNotificationsByIDs_Call) RunAndReturn(run func(uuid.UUIDs) (repositories.Notifications, error)) *MockNotificationDatabase_GetNotificationsByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationsByType provides a mock function with given fields: notificationType
func (_m *MockNotificationDatabase) GetNotificationsByType(notificationType repositories.NotificationType) ([]repositories.Notification, error) {
	ret := _m.Called(notificationType)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByType")
	}

	var r0 []repositories.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.NotificationType) ([]repositories.Notification, error)); ok {
		return rf(notificationType)
	}
	if rf, ok := ret.Get(0).(func(repositories.NotificationType) []repositories.Notification); ok {
		r0 = rf(notificationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.NotificationType) error); ok {
		r1 = rf(notificationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationDatabase_GetNotificationsByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationsByType'
type MockNotificationDatabase_GetNotificationsByType_Call struct {
	*mock.Call
}

// GetNotificationsByType is a helper method to define mock.On call
//   - notificationType repositories.NotificationType
func (_e *MockNotificationDatabase_Expecter) GetNotificationsByType(notificationType interface{}) *MockNotificationDatabase_GetNotificationsByType_Call {
	return &MockNotificationDatabase_GetNotificationsByType_Call{Call: _e.mock.On("GetNotificationsByType", notificationType)}
}

func (_c *MockNotificationDatabase_GetNotificationsByType_Call) Run(run func(notificationType repositories.NotificationType)) *MockNotificationDatabase_GetNotificationsByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.NotificationType))
	})
	return _c
}

func (_c *MockNotificationDatabase_GetNotificationsByType_Call) Return(_a0 []repositories.Notification, _a1 error) *MockNotificationDatabase_GetNotificationsByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationDatabase_GetNotificationsByType_Call) RunAndReturn(run func(repositories.NotificationType) ([]repositories.Notification, error)) *MockNotificationDatabase_GetNotificationsByType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationDatabase creates a new instance of MockNotificationDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationDatabase {
	mock := &MockNotificationDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
