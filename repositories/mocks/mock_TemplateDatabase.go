// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	repositories "personalNotificationService/repositories"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockTemplateDatabase is an autogenerated mock type for the TemplateDatabase type
type MockTemplateDatabase struct {
	mock.Mock
}

type MockTemplateDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateDatabase) EXPECT() *MockTemplateDatabase_Expecter {
	return &MockTemplateDatabase_Expecter{mock: &_m.Mock}
}

// CreateTemplate provides a mock function with given fields: template
func (_m *MockTemplateDatabase) CreateTemplate(template *repositories.Template) error {
	ret := _m.Called(template)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repositories.Template) error); ok {
		r0 = rf(template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplateDatabase_CreateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplate'
type MockTemplateDatabase_CreateTemplate_Call struct {
	*mock.Call
}

// CreateTemplate is a helper method to define mock.On call
//   - template *repositories.Template
func (_e *MockTemplateDatabase_Expecter) CreateTemplate(template interface{}) *MockTemplateDatabase_CreateTemplate_Call {
	return &MockTemplateDatabase_CreateTemplate_Call{Call: _e.mock.On("CreateTemplate", template)}
}

func (_c *MockTemplateDatabase_CreateTemplate_Call) Run(run func(template *repositories.Template)) *MockTemplateDatabase_CreateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repositories.Template))
	})
	return _c
}

func (_c *MockTemplateDatabase_CreateTemplate_Call) Return(_a0 error) *MockTemplateDatabase_CreateTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateDatabase_CreateTemplate_Call) RunAndReturn(run func(*repositories.Template) error) *MockTemplateDatabase_CreateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplates provides a mock function with given fields: templates
func (_m *MockTemplateDatabase) CreateTemplates(templates repositories.Templates) error {
	ret := _m.Called(templates)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplates")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.Templates) error); ok {
		r0 = rf(templates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplateDatabase_CreateTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplates'
type MockTemplateDatabase_CreateTemplates_Call struct {
	*mock.Call
}

// CreateTemplates is a helper method to define mock.On call
//   - templates repositories.Templates
func (_e *MockTemplateDatabase_Expecter) CreateTemplates(templates interface{}) *MockTemplateDatabase_CreateTemplates_Call {
	return &MockTemplateDatabase_CreateTemplates_Call{Call: _e.mock.On("CreateTemplates", templates)}
}

func (_c *MockTemplateDatabase_CreateTemplates_Call) Run(run func(templates repositories.Templates)) *MockTemplateDatabase_CreateTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Templates))
	})
	return _c
}

func (_c *MockTemplateDatabase_CreateTemplates_Call) Return(_a0 error) *MockTemplateDatabase_CreateTemplates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateDatabase_CreateTemplates_Call) RunAndReturn(run func(repositories.Templates) error) *MockTemplateDatabase_CreateTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateByID provides a mock function with given fields: id
func (_m *MockTemplateDatabase) GetTemplateByID(id uuid.UUID) (*repositories.Template, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateByID")
	}

	var r0 *repositories.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*repositories.Template, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *repositories.Template); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplateDatabase_GetTemplateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateByID'
type MockTemplateDatabase_GetTemplateByID_Call struct {
	*mock.Call
}

// GetTemplateByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTemplateDatabase_Expecter) GetTemplateByID(id interface{}) *MockTemplateDatabase_GetTemplateByID_Call {
	return &MockTemplateDatabase_GetTemplateByID_Call{Call: _e.mock.On("GetTemplateByID", id)}
}

func (_c *MockTemplateDatabase_GetTemplateByID_Call) Run(run func(id uuid.UUID)) *MockTemplateDatabase_GetTemplateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockTemplateDatabase_GetTemplateByID_Call) Return(_a0 *repositories.Template, _a1 error) *MockTemplateDatabase_GetTemplateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplateDatabase_GetTemplateByID_Call) RunAndReturn(run func(uuid.UUID) (*repositories.Template, error)) *MockTemplateDatabase_GetTemplateByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplatesByChannel provides a mock function with given fields: channel
func (_m *MockTemplateDatabase) GetTemplatesByChannel(channel repositories.NotificationChannel) ([]repositories.Template, error) {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplatesByChannel")
	}

	var r0 []repositories.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.NotificationChannel) ([]repositories.Template, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(repositories.NotificationChannel) []repositories.Template); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.Template)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.NotificationChannel) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplateDatabase_GetTemplatesByChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplatesByChannel'
type MockTemplateDatabase_GetTemplatesByChannel_Call struct {
	*mock.Call
}

// GetTemplatesByChannel is a helper method to define mock.On call
//   - channel repositories.NotificationChannel
func (_e *MockTemplateDatabase_Expecter) GetTemplatesByChannel(channel interface{}) *MockTemplateDatabase_GetTemplatesByChannel_Call {
	return &MockTemplateDatabase_GetTemplatesByChannel_Call{Call: _e.mock.On("GetTemplatesByChannel", channel)}
}

func (_c *MockTemplateDatabase_GetTemplatesByChannel_Call) Run(run func(channel repositories.NotificationChannel)) *MockTemplateDatabase_GetTemplatesByChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.NotificationChannel))
	})
	return _c
}

func (_c *MockTemplateDatabase_GetTemplatesByChannel_Call) Return(_a0 []repositories.Template, _a1 error) *MockTemplateDatabase_GetTemplatesByChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplateDatabase_GetTemplatesByChannel_Call) RunAndReturn(run func(repositories.NotificationChannel) ([]repositories.Template, error)) *MockTemplateDatabase_GetTemplatesByChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplatesByIDs provides a mock function with given fields: ids
func (_m *MockTemplateDatabase) GetTemplatesByIDs(ids uuid.UUIDs) (repositories.Templates, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplatesByIDs")
	}

	var r0 repositories.Templates
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUIDs) (repositories.Templates, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUIDs) repositories.Templates); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.Templates)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUIDs) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplateDatabase_GetTemplatesByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplatesByIDs'
type MockTemplateDatabase_GetTemplatesByIDs_Call struct {
	*mock.Call
}

// GetTemplatesByIDs is a helper method to define mock.On call
//   - ids uuid.UUIDs
func (_e *MockTemplateDatabase_Expecter) GetTemplatesByIDs(ids interface{}) *MockTemplateDatabase_GetTemplatesByIDs_Call {
	return &MockTemplateDatabase_GetTemplatesByIDs_Call{Call: _e.mock.On("GetTemplatesByIDs", ids)}
}

func (_c *MockTemplateDatabase_GetTemplatesByIDs_Call) Run(run func(ids uuid.UUIDs)) *MockTemplateDatabase_GetTemplatesByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUIDs))
	})
	return _c
}

func (_c *MockTemplateDatabase_GetTemplatesByIDs_Call) Return(_a0 repositories.Templates, _a1 error) *MockTemplateDatabase_GetTemplatesByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplateDatabase_GetTemplatesByIDs_Call) RunAndReturn(run func(uuid.UUIDs) (repositories.Templates, error)) *MockTemplateDatabase_GetTemplatesByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplateDatabase creates a new instance of MockTemplateDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateDatabase {
	mock := &MockTemplateDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
