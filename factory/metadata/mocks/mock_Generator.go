// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	common "personalNotificationService/common"

	mock "github.com/stretchr/testify/mock"

	repositories "personalNotificationService/repositories"
)

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator struct {
	mock.Mock
}

type MockGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerator) EXPECT() *MockGenerator_Expecter {
	return &MockGenerator_Expecter{mock: &_m.Mock}
}

// GenerateMetadata provides a mock function with given fields: _a0
func (_m *MockGenerator) GenerateMetadata(_a0 repositories.NotificationType) (common.Metadata, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateMetadata")
	}

	var r0 common.Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.NotificationType) (common.Metadata, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repositories.NotificationType) common.Metadata); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.NotificationType) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenerator_GenerateMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateMetadata'
type MockGenerator_GenerateMetadata_Call struct {
	*mock.Call
}

// GenerateMetadata is a helper method to define mock.On call
//   - _a0 repositories.NotificationType
func (_e *MockGenerator_Expecter) GenerateMetadata(_a0 interface{}) *MockGenerator_GenerateMetadata_Call {
	return &MockGenerator_GenerateMetadata_Call{Call: _e.mock.On("GenerateMetadata", _a0)}
}

func (_c *MockGenerator_GenerateMetadata_Call) Run(run func(_a0 repositories.NotificationType)) *MockGenerator_GenerateMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.NotificationType))
	})
	return _c
}

func (_c *MockGenerator_GenerateMetadata_Call) Return(_a0 common.Metadata, _a1 error) *MockGenerator_GenerateMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenerator_GenerateMetadata_Call) RunAndReturn(run func(repositories.NotificationType) (common.Metadata, error)) *MockGenerator_GenerateMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerator {
	mock := &MockGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
