// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	kafka "personalNotificationService/kafka"

	mock "github.com/stretchr/testify/mock"
)

// MockMessageWithPriority is an autogenerated mock type for the MessageWithPriority type
type MockMessageWithPriority struct {
	mock.Mock
}

type MockMessageWithPriority_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageWithPriority) EXPECT() *MockMessageWithPriority_Expecter {
	return &MockMessageWithPriority_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function with given fields:
func (_m *MockMessageWithPriority) Encode() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageWithPriority_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockMessageWithPriority_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
func (_e *MockMessageWithPriority_Expecter) Encode() *MockMessageWithPriority_Encode_Call {
	return &MockMessageWithPriority_Encode_Call{Call: _e.mock.On("Encode")}
}

func (_c *MockMessageWithPriority_Encode_Call) Run(run func()) *MockMessageWithPriority_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageWithPriority_Encode_Call) Return(_a0 []byte, _a1 error) *MockMessageWithPriority_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageWithPriority_Encode_Call) RunAndReturn(run func() ([]byte, error)) *MockMessageWithPriority_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// GetPriority provides a mock function with given fields:
func (_m *MockMessageWithPriority) GetPriority() kafka.MessagePriority {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPriority")
	}

	var r0 kafka.MessagePriority
	if rf, ok := ret.Get(0).(func() kafka.MessagePriority); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kafka.MessagePriority)
	}

	return r0
}

// MockMessageWithPriority_GetPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPriority'
type MockMessageWithPriority_GetPriority_Call struct {
	*mock.Call
}

// GetPriority is a helper method to define mock.On call
func (_e *MockMessageWithPriority_Expecter) GetPriority() *MockMessageWithPriority_GetPriority_Call {
	return &MockMessageWithPriority_GetPriority_Call{Call: _e.mock.On("GetPriority")}
}

func (_c *MockMessageWithPriority_GetPriority_Call) Run(run func()) *MockMessageWithPriority_GetPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageWithPriority_GetPriority_Call) Return(_a0 kafka.MessagePriority) *MockMessageWithPriority_GetPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageWithPriority_GetPriority_Call) RunAndReturn(run func() kafka.MessagePriority) *MockMessageWithPriority_GetPriority_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageWithPriority creates a new instance of MockMessageWithPriority. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageWithPriority(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageWithPriority {
	mock := &MockMessageWithPriority{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
